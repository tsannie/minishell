int		check_shlvl(t_set *set, char **envp)
{
	int i;
	unsigned long long  value;
	value = 0;
	set->shlvl = NULL;


	long long max =  9223372036854775807;
	i = 0;
	//printf("[%s][%d][%zu]\n", set->arg[0],ft_atoi(set->arg[0]), ft_strlen(set->arg[0]));
	int len = 0;
	int len_disp = 0;

	//printf("len  = [%d]\n", len);
	//printf("[%llu]\n", exit_val);
	//printf("[%s][-9223372036854775808][%d]\n", set->arg[0],ft_streql(set->arg[0], "-9223372036854775808"));



	i = -1;
	while (envp[++i])
	{
		if (ft_strncmp(envp[i], "SHLVL=", 6) == 0)
		{
			//printf("old[%s]\n", envp[i]);
			value = ft_atoillu(envp[i] + 6);
		}
	}
 	char *tmp;
	tmp = ft_strdup(ft_itoa(value));
	if (tmp[len_disp] == '-' || tmp[len_disp] == '+')
			len_disp++;
	while (tmp[len_disp])
	{
		len_disp++;
		len++;
	} 

	printf("val = [%llu] max = [%llu] len = [%d]\n", value, max, len);

/* 	if (len > 19)
		value = 1;
	else if (value > max)
	 	value = 1; */













		 /* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bin.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: phbarrad <phbarrad@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/03/03 12:18:28 by phbarrad          #+#    #+#             */
/*   Updated: 2021/03/09 15:19:46 by phbarrad         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minish.h"

char				**new_args(char **args)
{
	char			**str;
	int				x;

	x = 0;
	while (args[x])
		x++;
	if (!(str = malloc(sizeof(char *) * (x + 2))))
		return (NULL);
	x = 0;
	str[x] = ft_strdup("");
	while (args[x])
	{
		str[x + 1] = ft_strdup(args[x]);
		x++;
	}
	str[x + 1] = NULL; 
	return (str);
}

char				*get_path(t_set *set)
{
	DIR				*folder;
	struct dirent	*item;
	char			*path;
	int 			valid;

	valid = 0;
	folder = opendir("/bin/");
	if (!folder)
		return (NULL);
	while ((item = readdir(folder)))
	{
		if (ft_strcmp(item->d_name, set->cmd) == 0)
			valid = 1;
	}
	closedir(folder);
	if (valid == 0)
		return (NULL);
	return (ft_strjoin("/bin/", set->cmd));
}

char				*get_path_chemin(t_set *set, int len)
{
	DIR				*folder;
	struct dirent	*item;
	char			*path;
	int 			valid;

	valid = 0;
	int i = 0;

	if (!(path = malloc(sizeof(char) * (len + 1))))
		return (NULL);
	while (set->cmd[i] && ft_strncmp(set->cmd + i, set->cmd + len, ft_strlen(set->cmd + len)))
	{
		path[i] = set->cmd[i];
		i++;
	}
	path[i] = '\0';
	folder = opendir(path);
	if (!folder)
		return (NULL);
	while ((item = readdir(folder)))
	{
		if (ft_strcmp(item->d_name, set->cmd + len) == 0)
			valid = 1;
	}
	closedir(folder);
	if (valid == 0)
		return (NULL);
	return (ft_strjoin(path, set->cmd + len));
}

int				exec_bin(t_set *set, int chemin, int len, char *path)
{
	int r;
	int ret;
	int pid;
	char **args;
	r = -1;
	ret = 0;
	pid = fork();
	args = new_args(set->arg);
	if (chemin == 0)
		path = get_path(set);
	else
		path = get_path_chemin(set, len + 5);
	if (path == NULL)
		return (1);
	if (path != NULL && pid == 0)
	{
		set->exit_val = execve(path, args, set->envp);
		r = -1;
		while (args[++r])
			free(args[r]);
		free(args);
		free(path);
		exit(0);
	}
	else
		waitpid(pid, &ret, 0);
	r = -1;
	while (args[++r])
		free(args[r]);
	free(args);
	return (0);
}
int					bash_cmd(t_set *set)
{
	char			*path;
	int				x;
	int				len;
	int				chemin;
	char			**args;
	
	x = 0;
	len = 0;
	chemin = 0;
	args = new_args(set->arg);
	while (set->cmd[x])
	{
		if (ft_strncmp("/bin/", set->cmd + x, 5) == 0)
			chemin = 1;
		if (chemin == 0)
			len++;
		x++;
	}
	return(exec_bin(set, chemin, len, path));
}