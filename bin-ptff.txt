# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    bin-ptff.txt                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: phbarrad <phbarrad@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/03/03 12:18:28 by phbarrad          #+#    #+#              #
#    Updated: 2021/03/17 10:44:49 by phbarrad         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../includes/minish.h"

char				**new_args(char **args, t_set *set, char *cmd)
{
	char			**str;
	int				x;

	x = 0;
	while (args[x])
		x++;
	if (!(str = malloc(sizeof(char *) * (x + 2))))
		return (NULL);
	x = 0;
	str[x] = ft_strdup(cmd);
	while (args[x])
	{
		str[x + 1] = ft_strdup(args[x]);
		x++;
	}
	str[x + 1] = NULL;
	return (str);
}

char				*get_path_chemin(t_set *set, char *path, int len, char *cmd)
{
	DIR				*folder;
	struct dirent	*item;
	int				valid;
	int 			ap;
	int				r;
	char			*op;

	r = 0;
	valid = 0;
	op = ft_strduplen(cmd, len);
	folder = opendir(op);
	free(op);
	if (!folder)
	{
		free(op);
		return (NULL);
	}
	while ((item = readdir(folder)) && valid == 0)
	{
		if (ft_strcmp(item->d_name, cmd + len) == 0)
			valid = 1;
	}
	closedir(folder);
	if (valid == 1 && ft_strncmp(path, "./", ft_strlen(path)) == 0 && is_dir(cmd + len) == 1)
	{
		set->exit_val = 3;
		return (NULL);
	}
	if (valid == 0 && ft_strncmp(path, "./", ft_strlen(path)) == 0)
	{
		set->exit_val = 4;
		return (NULL);
	}
	if (valid == 0)
	{
		set->exit_val = 4;
		return (NULL);
	}
	set->pathbc = ft_strdup(cmd);
	return (set->pathbc);
}

char				*get_path(t_set *set, char *path, int r, char *cmd)
{
	DIR				*folder;
	struct dirent	*item;
	int				valid;

	valid = 0;
	folder = opendir(path + r);
	if (!folder)
		return (NULL);
	while ((item = readdir(folder)))
	{
		if (ft_strcmp(item->d_name, cmd) == 0)
			valid = 1;
	}
	closedir(folder);
	if (valid == 1 && ft_strncmp(path, "./", ft_strlen(path)) == 0 && is_dir(cmd) == 1)
	{
		set->exit_val = 3;
		return (NULL);
	}
	if (valid == 0 && ft_strncmp(path, "./", ft_strlen(path)) == 0)
	{
		set->exit_val = 4;
		return (NULL);
	}
	if (valid == 0)
		return (NULL);
	set->pathbc = ft_strdup(path + r);
	return (ft_strjoin(path + r, cmd));
}

int					exec_bin(t_set *set, char *path, char *cmd)
{
	int				pid;
	char			**args;
	int				r;
	char			*ttm;
	int g;
	int ret;
	
	g = 0;
	pid = fork();
	args = new_args(set->arg, set, cmd);
	ret = 0;
	r = 0;
	if (path != NULL && pid == 0)
	{	
		if (ft_strncmp(cmd, "env", ft_strlen(cmd)) == 0)
		{
			ttm = joinf("_=", path, "", "");
			ft_modenv(ttm, set);
			g = 1;
			set->exit_val = execve(path, args, set->envp);
		}
		else
			set->exit_val = execve(path, args, set->envp);
	}
	else
		waitpid(pid, &ret, 0);
	if (ret == 256)
		set->exit_val = 1;
	else if (ret == 54784)
		set->exit_val = 1;
	if (g == 1)
	{
		if (set->pathbc != NULL)
		{
			free(set->pathbc);
			set->pathbc = NULL;
		} 
		free(ttm);
	}
	r = -1;
	while (args[++r])
		free(args[r]);
	free(args);
	return (0);
}

int					bash_cmd(t_set *set, char *cmd)
{
	char			*path;
	int				x;
	int				y;
	int				len;
	int				chemin;
	int r = 0;

	r = 0;
	y = 0;
	x = 0;
	len = 0;
	chemin = 0;
	path = NULL;
	if (set->path == NULL)
		return (1);
	if (cmd[x] == '.' && cmd[x + 1] == '/')
	{
		chemin = 1;
		len = 2;
		path = ft_strdup("./");
	}
	while (cmd[x] == '.' && cmd[x + 1] == '.' && cmd[x + 2] == '/' && len == 0)
		x += 3;
	if (x != 0)
		x--;
	while (cmd[x] && len == 0)
	{
		while (set->all_path[y] && len == 0)
		{
			r = 0;
			if (ft_strncmp(set->all_path[y] + r, cmd + x,
			ft_strlen(set->all_path[y] + r)) == 0 && path == NULL)
			{
				chemin = 1;
				len = x + ft_strlen(set->all_path[y] + r);
				path = ft_strdup(set->all_path[y] + r);
			}
			y++;
		}
		y = 0;
		x++;
	}
	y = -1;
	if (chemin == 0 && path == NULL && set->all_path)
	{
		while (set->all_path[++y] && path == NULL)
			path = get_path(set, set->all_path[y], r,cmd);
	}
	else if (chemin == 1)
		path = get_path_chemin(set, path, len, cmd);
	if (path == NULL)
		return (1);
	return (exec_bin(set, path, cmd));
}
